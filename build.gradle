buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

group= "com.minestellar" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Minestellar"

ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "eclipse"

    replaceIn "api/package-info.java"
    replace "@API_VERSION", config.api_version

    replaceIn "api/blocks/package-info.java"
    replace "@API_VERSION", config.api_version

    replaceIn "api/data/package-info.java"
    replace "@API_VERSION", config.api_version

    replaceIn "api/data/block/package-info.java"
    replace "@API_VERSION", config.api_version

    replaceIn "api/data/wired/package-info.java"
    replace "@API_VERSION", config.api_version

    replaceIn "api/data/wireless/package-info.java"
    replace "@API_VERSION", config.api_version
}

version = "${config.minecraft_version}-${config.mod_version}"

dependencies {
    compile files("lib/CoFHCore-[1.7.10]3.0.0B3-dev-26.jar")
    compile files("lib/Mekanism-1.7.10-7.1.1.127.jar")
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

sourceSets {
    main {
        output.resourcesDir = output.classesDir
    }

    api {
        java {
            srcDir 'api'
        }
    }
}

// add source jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'source'
}

// deobf jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// make sure all of these happen when we run build
build.dependsOn sourceJar, deobfJar